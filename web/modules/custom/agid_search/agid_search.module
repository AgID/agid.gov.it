<?php

/**
 * @file
 * Contains agid_search.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function agid_search_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the agid_search module.
    case 'help.page.agid_search':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides an integration plugin for global search system.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function agid_search_theme($existing, $type, $theme, $path) {
  return [
    'agid_search_simple_full_text_search' => [
      'variables' => ['view_uri' => NULL],
    ],
  ];
}

/**
 * Implements hook_views_post_execute().
 */
function agid_search_views_post_execute(\Drupal\views\ViewExecutable $view) {
  $query = $view->getQuery();

  if ($view->total_rows == 0
    && $query instanceof \Drupal\search_api\Plugin\views\query\SearchApiQuery
  ) {

    // Search plugin in header and footer.
    foreach (['header', 'footer'] as $pos) {
      $plugins = $view->{$pos};
      /** @var \Drupal\views\Plugin\views\area\AreaPluginBase $plugin */
      foreach ($plugins as $plugin) {
        if ($plugin instanceof \Drupal\agid_search\Plugin\views\area\SpellCheckSolr) {
          $plugin->isRedirected();
        }
      }
    }

  }
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function agid_search_search_api_solr_query_alter(\Solarium\Core\Query\QueryInterface $solarium_query, \Drupal\search_api\Query\QueryInterface $query) {
  // The option 'spellcheck' is set in the plugin
  // \Drupal\agid_search\Plugin\views\area\SpellCheckSolr:query().
  if ($spellcheck_options = $query->getOption('search_api_spellcheck', FALSE)) {
    $spellcheck = $solarium_query->getSpellcheck();
    $spellcheck->setOptions($spellcheck_options);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agid_search_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $view_data = $form_state->getStorage('view');
  $view = $view_data['view'];

  if ($view instanceof \Drupal\views\ViewExecutable
    && $form['#id'] == 'views-exposed-form-search-site-page'
    && $view->getQuery() instanceof \Drupal\search_api\Plugin\views\query\SearchApiQuery) {

    // Update description of SearchApiFulltext filters.
    $current_request_query = \Drupal::requestStack()
      ->getCurrentRequest()->query;

    foreach ($view->filter as $key => $filter) {
      if ($filter instanceof \Drupal\search_api\Plugin\views\filter\SearchApiFulltext) {
        // The filter could be different then the key.
        if (!empty($filter->options['expose']['identifier'])) {
          $key = $filter->options['expose']['identifier'];
        }

        if (!isset($form[$key]) || !$current_request_query->get($key, FALSE)
          || !$current_request_query->get('prev_' . $key, FALSE)) {
          // Not found filter for query key.
          continue;
        }

        // Build message to place after field filter.
        $message = t(
          "Not found result for <b>%prev_keyword</b>. The results related to <b>%keyword</b>",
          [
            '%prev_keyword' => $current_request_query->get('prev_' . $key, FALSE),
            '%keyword' => $current_request_query->get($key),
          ]
        );

        // Add text after fulltext field.
        $form[$key]['#suffix'] = '<p class="agid_search_spellcheck_solr-suggestion">' . (string) $message . '</p>';

        // TODO: Update the value of fulltext field with prev research keyword.
        $form[$key]['#default_value'] = $current_request_query->get('prev_' . $key, FALSE);
      }
    }

    // Alter type of filters element form.
    if ($view->current_display == 'page') {
      foreach (\Drupal\Core\Render\Element::children($form) as $key) {
        if ($form[$key]['#type'] == 'select' && isset($form[$key]['#multiple']) && $form[$key]['#multiple']) {
          $form[$key]['#type'] = 'checkboxes';
        }
      }
    }

    $form['#attached']['library'][] = 'agid_search/search_site';
  }

}

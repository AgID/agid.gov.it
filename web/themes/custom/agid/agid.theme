<?php

/**
 * @file
 * Contains the theme's functions to manipulate Drupal's default markup.
 */

use Drupal\Core\Url;

/**
 * Implements hook_page_attachments_alter().
 */
function agid_page_attachments_alter(&$page) {
  // We need to add a reference to the assets dir for webpack async loader.
  // @see https://github.com/webpack/docs/wiki/configuration#outputpublicpath.
  $theme_path = base_path() . drupal_get_path('theme', 'agid');
  $assets_path = $theme_path . '/build/';
  $page['#attached']['library'][] = 'agid/ita-web-toolkit';
  $page['#attached']['drupalSettings']['agid']['webpackPublicPath'] = $assets_path;
}

/**
 * Implements hook_preprocess_field().
 */
function agid_preprocess_field(&$variables) {
  $field = $variables['element'];

  $field_name = $field['#field_name'];

  switch ($field_name) {

    case 'field_repository_files':
      $variables['item_file_types'] = [];
      $variables['file_types'] = [];
      foreach ($field as $k => $item) {
        if (!is_numeric($k)) {
          continue;
        }
        /** @var Drupal\file_entity\Entity\FileEntity $file */
        $file = $item['#file'];
        if (is_null($file)) {
          continue;
        }
        $field_type = $file->hasField('field_type') ? $file->get('field_type') : null;
        if ( $field_type != null && $file->get('field_type')->getValue() != null ) {
          /** @var \Drupal\taxonomy\Entity\Term $term */
          $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($field_type->getValue()['0']['target_id']);
          $item_title = $term->getName();
        }
        if (empty($item_title)) {
          $item_title = $file->get('filename')->getValue()[0]['value'];
        }
        $variables['item_file_types'][] = $item_title;
        if ( !in_array($item_title, $variables['file_types']) ) {
          $variables['file_types'][] = $item_title;
        }
      }
      break;

    default:
      return;
  }
}

/**
 * Implements template_preprocess_breadcrumb().
 */
function agid_preprocess_breadcrumb(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() == 'view.faq_terms.page_1') {
    $t = \Drupal::routeMatch()->getParameter('arg_0');
    if (!empty($t)) {
      $variables['title'] = str_replace('-', ' ', ucfirst($t));
    }
  }

  // Add cache context based on url.
  $variables['#cache']['contexts'][] = 'url';
}

/**
 * Implements template_preprocess_page().
 */
function agid_preprocess_page(&$variables) {

  $site_config = \Drupal::config('system.site');

  $variables['site_name'] = $site_config->get('name');
  $variables['site_slogan'] = $site_config->get('slogan');
  $variables['site_logo'] = '/' . drupal_get_path('theme','agid') . '/logo.svg';

}

/**
 * Implements template_preprocess_html().
 */
function agid_preprocess_html(&$variables) {
  $variables['icon_path'] = '/' . drupal_get_path('theme','agid') . '/icons';
}

function agid_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'language_block:language_interface') {
    foreach ($variables['content']['#links'] as $langKey => &$langItem) {
      $langItem['url'] = Url::fromRoute('<front>', [], $langKey);
    }
  }
}

/**
 * Alter linee_guida exposed filter form
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function agid_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Get current view object
  $view = $form_state->getStorage('view');
  // Check if views_exposed_form is from linee_guida
  if ($form_id === 'views_exposed_form' && $view['view']->id() === 'linee_guida') {
    // Unset $view, free memory.
    unset($view);
    // Check, foreach exposed term, if has related contents
    foreach ($form['arguments']['#options'] as $tid => $option) {
      // Get all files entity related $tid term
      $files = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties([ 'field_arguments' => $tid, ]);
      // If not exists remove the term from options
      if (count($files) == 0) {
        unset($form['arguments']['#options'][$tid]);
      }
    }
  }
}
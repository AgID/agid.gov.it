<?php

/**
 * @file
 * Contains content_changes_notify.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function content_changes_notify_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the content_changes_notify module.
    case 'help.page.content_changes_notify':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Implements the possibiliy to choose on which content&#039;s changes which one (configurable)  users will be notified through mail') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave().
 */
function content_changes_notify_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  $config = \Drupal::config('content_changes_notify.settings');
  $enabledTypes = is_array($config->get('types')) ? $config->get('types') : [];
  $enabledMails = $config->get('reviser_emails') !== null ? explode(PHP_EOL, $config->get('reviser_emails')) : [];

  if (in_array($entity->bundle(), $enabledTypes + ['page'], TRUE))  {
    $mailManager = \Drupal::service('plugin.manager.mail');
    // Get original state and the new one.
    if (isset($entity->original)) {
      $toState = $entity->get('moderation_state')->value;
      if ($entity->isDefaultRevision() == TRUE) {
        $revision_ids = \Drupal::entityTypeManager()->getStorage('node')->revisionIds($entity);
        $last_revision_id = end($revision_ids);
        
        if ($entity->getRevisionId() != $last_revision_id) {
          // Load the revision.
          $last_revision = \Drupal::entityTypeManager()->getStorage('node')->loadRevision($last_revision_id);
          // Get the revisions moderation state.
          $fromState = $last_revision->get('moderation_state')->getString();
        } else {
          $fromState = $entity->original->get('moderation_state')->value;
        }
      }
    } else {
      $fromState = $toState = $entity->get('moderation_state')->value;
    }

    // Check if new state is different from published
    if ($toState !== 'published' && $toState !== $fromState) {
      // Get parsed mail text and title
      $titleValue = $config->get('reviser_title');
      $messageValue = $config->get('reviser_message');
      // Replace value with right tokens
      $tokenService = \Drupal::token();
      $title = $tokenService->replace($titleValue, ['node' => $entity]);
      $message = $tokenService->replace($messageValue['value'], ['node' => $entity]);

      foreach ($enabledMails as $mail) {
        if (!empty($messageValue)) {
          $mailManager->mail('content_changes_notify', 'notify', $mail, 'it', ['title' => $title, 'message' => $message,], NULL, true);
        }
      }
    } elseif ($toState === 'published' && $toState !== $fromState) {
      // Get parsed mail text and title
      $titleValue = $config->get('author_title');
      $messageValue = $config->get('author_message');
      // Replace value with right tokens
      $tokenService = \Drupal::token();
      $title = $tokenService->replace($titleValue, ['node' => $entity]);
      $message = $tokenService->replace($messageValue['value'], ['node' => $entity]);

      // Node author's mail to enabled mails list.
      $authorMail = $entity->original->getOwner()->getEmail();

      $mailManager->mail('content_changes_notify', 'notify', $authorMail, 'it', ['title' => $title, 'message' => $message,], NULL, true);
    }
  }
}

/**
 * Implements hook_mail().
 */
function content_changes_notify_mail($key, &$message, $params) {
 switch ($key) {
   case 'notify':
     $message['from'] = \Drupal::config('system.site')->get('mail');
     $message['subject'] = $params['title'];
     $message['body'][] = $params['message'];
     break;
 }
}
